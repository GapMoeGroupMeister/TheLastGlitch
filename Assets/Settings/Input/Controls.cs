//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""4187d948-ef47-41e0-afe1-a4925074f00d"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""81abb349-f6cc-4055-a6d3-9730f31c4347"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""a2d70db7-7ea0-4731-a771-cb9855a16697"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Value"",
                    ""id"": ""40343baa-98b5-49ba-974d-48962ae04d90"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChangeOne"",
                    ""type"": ""Button"",
                    ""id"": ""7524da69-daef-4bd2-83ca-b1275c41c701"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeOne2"",
                    ""type"": ""Button"",
                    ""id"": ""70ff7a0b-5c9a-4f80-a930-7dd587c019e3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""b208a2c1-7805-4097-be46-3cfb186a7c94"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePos"",
                    ""type"": ""Value"",
                    ""id"": ""68925f38-e006-42e6-b7db-3087e5574b13"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""989c31b3-7f1c-4c8a-b21f-749c8c5860e3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WSAD"",
                    ""id"": ""9f394e36-aa0b-41fb-b568-b11163979e77"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""35ccdd44-24a1-4fe3-8e2c-03e50740eecd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3325d27b-d0ba-4013-9eaa-09153874895b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f974d49b-fa34-4dfa-980b-0264131bb4df"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f3c2e1ef-3440-4f10-b2c5-d388c84972e5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""10aa8672-9d7d-4357-acc9-8040b1b0535a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05934594-9ba3-4896-99e5-818a341b528f"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0407474-c15b-4fec-89dd-295f5a4b0d11"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeOne"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce037163-b9b5-4429-85a0-0a7419203c2a"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeOne2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03aabc8c-936e-4cf1-bfc3-8280d184ac38"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a84a8998-92dd-4908-b402-750e68f6c5e4"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42b0d9e0-68ee-408f-baaf-30d6cc0b6307"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyMouse"",
            ""bindingGroup"": ""KeyMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
<<<<<<< HEAD:Assets/Settings/Input/Controls.cs
        m_Player_Mouse = m_Player.FindAction("Mouse", throwIfNotFound: true);
        m_Player_ChangeOne = m_Player.FindAction("ChangeOne", throwIfNotFound: true);
        m_Player_ChangeOne2 = m_Player.FindAction("ChangeOne2", throwIfNotFound: true);
        m_Player_Fire = m_Player.FindAction("Fire", throwIfNotFound: true);
=======
        m_Player_Attack = m_Player.FindAction("Attack", throwIfNotFound: true);
        m_Player_Swap = m_Player.FindAction("Swap", throwIfNotFound: true);
        m_Player_Interaction = m_Player.FindAction("Interaction", throwIfNotFound: true);
        m_Player_UseGadget = m_Player.FindAction("UseGadget", throwIfNotFound: true);
        m_Player_ActiveSkill = m_Player.FindAction("ActiveSkill", throwIfNotFound: true);
        m_Player_MousePos = m_Player.FindAction("MousePos", throwIfNotFound: true);
        m_Player_Dash = m_Player.FindAction("Dash", throwIfNotFound: true);
>>>>>>> Develop:Assets/99_Settings/InputManager/PlayerController.cs
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Jump;
<<<<<<< HEAD:Assets/Settings/Input/Controls.cs
    private readonly InputAction m_Player_Mouse;
    private readonly InputAction m_Player_ChangeOne;
    private readonly InputAction m_Player_ChangeOne2;
    private readonly InputAction m_Player_Fire;
=======
    private readonly InputAction m_Player_Attack;
    private readonly InputAction m_Player_Swap;
    private readonly InputAction m_Player_Interaction;
    private readonly InputAction m_Player_UseGadget;
    private readonly InputAction m_Player_ActiveSkill;
    private readonly InputAction m_Player_MousePos;
    private readonly InputAction m_Player_Dash;
>>>>>>> Develop:Assets/99_Settings/InputManager/PlayerController.cs
    public struct PlayerActions
    {
        private @Controls m_Wrapper;
        public PlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
<<<<<<< HEAD:Assets/Settings/Input/Controls.cs
        public InputAction @Mouse => m_Wrapper.m_Player_Mouse;
        public InputAction @ChangeOne => m_Wrapper.m_Player_ChangeOne;
        public InputAction @ChangeOne2 => m_Wrapper.m_Player_ChangeOne2;
        public InputAction @Fire => m_Wrapper.m_Player_Fire;
=======
        public InputAction @Attack => m_Wrapper.m_Player_Attack;
        public InputAction @Swap => m_Wrapper.m_Player_Swap;
        public InputAction @Interaction => m_Wrapper.m_Player_Interaction;
        public InputAction @UseGadget => m_Wrapper.m_Player_UseGadget;
        public InputAction @ActiveSkill => m_Wrapper.m_Player_ActiveSkill;
        public InputAction @MousePos => m_Wrapper.m_Player_MousePos;
        public InputAction @Dash => m_Wrapper.m_Player_Dash;
>>>>>>> Develop:Assets/99_Settings/InputManager/PlayerController.cs
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
<<<<<<< HEAD:Assets/Settings/Input/Controls.cs
            @Mouse.started += instance.OnMouse;
            @Mouse.performed += instance.OnMouse;
            @Mouse.canceled += instance.OnMouse;
            @ChangeOne.started += instance.OnChangeOne;
            @ChangeOne.performed += instance.OnChangeOne;
            @ChangeOne.canceled += instance.OnChangeOne;
            @ChangeOne2.started += instance.OnChangeOne2;
            @ChangeOne2.performed += instance.OnChangeOne2;
            @ChangeOne2.canceled += instance.OnChangeOne2;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
=======
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Swap.started += instance.OnSwap;
            @Swap.performed += instance.OnSwap;
            @Swap.canceled += instance.OnSwap;
            @Interaction.started += instance.OnInteraction;
            @Interaction.performed += instance.OnInteraction;
            @Interaction.canceled += instance.OnInteraction;
            @UseGadget.started += instance.OnUseGadget;
            @UseGadget.performed += instance.OnUseGadget;
            @UseGadget.canceled += instance.OnUseGadget;
            @ActiveSkill.started += instance.OnActiveSkill;
            @ActiveSkill.performed += instance.OnActiveSkill;
            @ActiveSkill.canceled += instance.OnActiveSkill;
            @MousePos.started += instance.OnMousePos;
            @MousePos.performed += instance.OnMousePos;
            @MousePos.canceled += instance.OnMousePos;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
>>>>>>> Develop:Assets/99_Settings/InputManager/PlayerController.cs
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
<<<<<<< HEAD:Assets/Settings/Input/Controls.cs
            @Mouse.started -= instance.OnMouse;
            @Mouse.performed -= instance.OnMouse;
            @Mouse.canceled -= instance.OnMouse;
            @ChangeOne.started -= instance.OnChangeOne;
            @ChangeOne.performed -= instance.OnChangeOne;
            @ChangeOne.canceled -= instance.OnChangeOne;
            @ChangeOne2.started -= instance.OnChangeOne2;
            @ChangeOne2.performed -= instance.OnChangeOne2;
            @ChangeOne2.canceled -= instance.OnChangeOne2;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
=======
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Swap.started -= instance.OnSwap;
            @Swap.performed -= instance.OnSwap;
            @Swap.canceled -= instance.OnSwap;
            @Interaction.started -= instance.OnInteraction;
            @Interaction.performed -= instance.OnInteraction;
            @Interaction.canceled -= instance.OnInteraction;
            @UseGadget.started -= instance.OnUseGadget;
            @UseGadget.performed -= instance.OnUseGadget;
            @UseGadget.canceled -= instance.OnUseGadget;
            @ActiveSkill.started -= instance.OnActiveSkill;
            @ActiveSkill.performed -= instance.OnActiveSkill;
            @ActiveSkill.canceled -= instance.OnActiveSkill;
            @MousePos.started -= instance.OnMousePos;
            @MousePos.performed -= instance.OnMousePos;
            @MousePos.canceled -= instance.OnMousePos;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
>>>>>>> Develop:Assets/99_Settings/InputManager/PlayerController.cs
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_KeyMouseSchemeIndex = -1;
    public InputControlScheme KeyMouseScheme
    {
        get
        {
            if (m_KeyMouseSchemeIndex == -1) m_KeyMouseSchemeIndex = asset.FindControlSchemeIndex("KeyMouse");
            return asset.controlSchemes[m_KeyMouseSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
<<<<<<< HEAD:Assets/Settings/Input/Controls.cs
        void OnMouse(InputAction.CallbackContext context);
        void OnChangeOne(InputAction.CallbackContext context);
        void OnChangeOne2(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
=======
        void OnAttack(InputAction.CallbackContext context);
        void OnSwap(InputAction.CallbackContext context);
        void OnInteraction(InputAction.CallbackContext context);
        void OnUseGadget(InputAction.CallbackContext context);
        void OnActiveSkill(InputAction.CallbackContext context);
        void OnMousePos(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
>>>>>>> Develop:Assets/99_Settings/InputManager/PlayerController.cs
    }
}
